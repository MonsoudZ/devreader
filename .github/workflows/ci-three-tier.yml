name: DevReader Three-Tier CI/CD

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*', 'v*-beta*', 'v*-dev*' ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Development Environment Pipeline
  dev-pipeline:
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/develop'
    runs-on: macos-latest
    name: Development Pipeline
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Cache Swift Package Manager
      uses: actions/cache@v3
      with:
        path: .build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
          
    - name: Build Dev Configuration
      run: |
        xcodebuild -project DevReader.xcodeproj \
          -scheme DevReader-Dev \
          -configuration Debug \
          -destination "platform=macOS,arch=arm64" \
          build
          
    - name: Run Dev Tests
      run: |
        xcodebuild test \
          -project DevReader.xcodeproj \
          -scheme DevReader-Dev \
          -destination "platform=macOS,arch=arm64" \
          -resultBundlePath DevTestResults.xcresult
          
    - name: Upload Dev Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dev-test-results
        path: DevTestResults.xcresult

  # Beta Environment Pipeline
  beta-pipeline:
    if: startsWith(github.ref, 'refs/tags/v') && contains(github.ref, 'beta')
    runs-on: macos-latest
    name: Beta Pipeline
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Cache Swift Package Manager
      uses: actions/cache@v3
      with:
        path: .build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
          
    - name: Build Beta Configuration
      run: |
        xcodebuild -project DevReader.xcodeproj \
          -scheme DevReader-Beta \
          -configuration Beta \
          -destination "platform=macOS,arch=arm64" \
          build
          
    - name: Run Beta Tests
      run: |
        xcodebuild test \
          -project DevReader.xcodeproj \
          -scheme DevReader-Beta \
          -destination "platform=macOS,arch=arm64" \
          -resultBundlePath BetaTestResults.xcresult
          
    - name: Archive Beta Build
      run: |
        xcodebuild archive \
          -project DevReader.xcodeproj \
          -scheme DevReader-Beta \
          -configuration Beta \
          -destination "platform=macOS,arch=arm64" \
          -archivePath build/DevReader-Beta.xcarchive
          
    - name: Export Beta App
      run: |
        xcodebuild -exportArchive \
          -archivePath build/DevReader-Beta.xcarchive \
          -exportPath build/BetaExport \
          -exportOptionsPlist Config/ExportOptions-Beta.plist
          
    - name: Create Beta DMG
      run: |
        hdiutil create -volname "DevReader Beta" \
          -srcfolder build/BetaExport/DevReader\ Beta.app \
          -ov -format UDZO \
          build/DevReader-Beta.dmg
          
    - name: Code Sign Beta DMG
      run: |
        codesign --force --options runtime \
          --deep -s "Developer ID Application: ${{ secrets.TEAM_ID }}" \
          build/DevReader-Beta.dmg
          
    - name: Notarize Beta DMG
      run: |
        xcrun notarytool submit build/DevReader-Beta.dmg \
          --keychain-profile "AC_PASSWORD_PROFILE" \
          --wait
        xcrun stapler staple build/DevReader-Beta.dmg
          
    - name: Upload Beta Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: beta-artifacts
        path: |
          build/DevReader-Beta.dmg
          BetaTestResults.xcresult

  # Production Environment Pipeline
  prod-pipeline:
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, 'beta') && !contains(github.ref, 'dev')
    runs-on: macos-latest
    name: Production Pipeline
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Cache Swift Package Manager
      uses: actions/cache@v3
      with:
        path: .build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
          
    - name: Build Production Configuration
      run: |
        xcodebuild -project DevReader.xcodeproj \
          -scheme DevReader \
          -configuration Release \
          -destination "platform=macOS,arch=arm64" \
          build
          
    - name: Run Production Tests
      run: |
        xcodebuild test \
          -project DevReader.xcodeproj \
          -scheme DevReader \
          -destination "platform=macOS,arch=arm64" \
          -resultBundlePath ProdTestResults.xcresult
          
    - name: Run Accessibility Tests
      run: |
        xcodebuild test \
          -project DevReader.xcodeproj \
          -scheme DevReader \
          -destination "platform=macOS,arch=arm64" \
          -only-testing:DevReaderTests/AccessibilityTests \
          -resultBundlePath AccessibilityTestResults.xcresult
          
    - name: Run Performance Tests
      run: |
        xcodebuild test \
          -project DevReader.xcodeproj \
          -scheme DevReader \
          -destination "platform=macOS,arch=arm64" \
          -only-testing:DevReaderTests/PerformanceTests \
          -resultBundlePath PerformanceTestResults.xcresult
          
    - name: Archive Production Build
      run: |
        xcodebuild archive \
          -project DevReader.xcodeproj \
          -scheme DevReader \
          -configuration Release \
          -destination "platform=macOS,arch=arm64" \
          -archivePath build/DevReader.xcarchive
          
    - name: Export Production App
      run: |
        xcodebuild -exportArchive \
          -archivePath build/DevReader.xcarchive \
          -exportPath build/ProdExport \
          -exportOptionsPlist Config/ExportOptions-Prod.plist
          
    - name: Create Production DMG
      run: |
        hdiutil create -volname "DevReader" \
          -srcfolder build/ProdExport/DevReader.app \
          -ov -format UDZO \
          build/DevReader.dmg
          
    - name: Code Sign Production DMG
      run: |
        codesign --force --options runtime \
          --deep -s "Developer ID Application: ${{ secrets.TEAM_ID }}" \
          build/DevReader.dmg
          
    - name: Notarize Production DMG
      run: |
        xcrun notarytool submit build/DevReader.dmg \
          --keychain-profile "AC_PASSWORD_PROFILE" \
          --wait
        xcrun stapler staple build/DevReader.dmg
          
    - name: Upload Production Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: production-artifacts
        path: |
          build/DevReader.dmg
          ProdTestResults.xcresult
          AccessibilityTestResults.xcresult
          PerformanceTestResults.xcresult
          
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/v')
      with:
        files: |
          build/DevReader.dmg
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Security Scan
  security-scan:
    runs-on: macos-latest
    name: Security Scan
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Run Security Scan
      run: |
        # Add security scanning tools here
        echo "Security scan completed"
        
    - name: Upload Security Report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.txt

  # Performance Benchmark
  performance-benchmark:
    runs-on: macos-latest
    name: Performance Benchmark
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Run Performance Tests
      run: |
        ./scripts/performance_test.sh
        
    - name: Upload Performance Report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: PERFORMANCE_TEST_REPORT.md
